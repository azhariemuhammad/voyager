import p from"fs/promises";import x from"express";import"url";import{createServer as g}from"vite";import d from"path";const u=d.dirname(import.meta.url);console.log({__dirname:u});const m=3001,S=e=>d.resolve(u,e),k=async()=>{const e="dist/client/assets",o=(await p.readdir(e)).filter(t=>t.endsWith(".css")),s=[];for(const t of o){const a=await p.readFile(d.join(e,t),"utf-8");s.push(`<style type="text/css">${a}</style>`)}return s.join(`
`)};async function A(e=process.cwd(),n=process.env.NODE_ENV==="production",o){const s=x(),t=await g({root:e,server:{middlewareMode:!0,hmr:{port:o}},appType:"custom"});s.use(t.middlewares),s.use((await import("serve-static")).default(S("dist/client"),{index:!1}));const a=k();return s.get("*",async(f,c)=>{try{const r=f.originalUrl;let i=await p.readFile("dist/client/index.html","utf-8");i=await t.transformIndexHtml(r,i);const{render:h}=await t.ssrLoadModule("/server/renderer.tsx"),l={},w=h(r,l);if(l.url)return c.redirect(301,l.url);const y=n?"":await a,v=i.replace("App is loading...",w).replace("<!--head-->",y);c.status(200).set({"Content-Type":"text/html"}).end(v)}catch(r){!n&&t.ssrFixStacktrace(r),console.log(r.stack),c.status(500).end(r.stack)}}),{app:s,vite:t}}A().then(({app:e})=>e.listen(m,()=>{console.log(`Server is listening on port ${m}`)}));
